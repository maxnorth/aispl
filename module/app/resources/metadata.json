export var metadata {"site":{"pages":{"index":{"html":""},"info":{"html":""},"notes":{"txt":""},"patterns":{"html":""},"readme":{"html":"<main-template>\r\n    <markdown>\r\n        This is the readme for the Pattern Library project\r\n        \r\n        \r\n        Repeaters\r\n        What does a repeater repeat?\r\n        \r\n            There are 4 ways to use a repeater.\r\n            -by specifying it on the repeater\r\n                angular 2 makes javascript variables available to your html. \r\n                in this case, we are repeating on the *items* javascript object\r\n                <example-repeater (on)=\"items\"></example-repeater>\r\n                or we can repeat on an object referenced by name from the library.\r\n                <example-repeater example-repeater (on)=\"patterns.example\"></example-repeater>\r\n            -by specifying what it should repeat in a configuration file\r\n            -by context. it will use the items property of the repeater it is inside of\r\n            \r\n        The Pages folder defines site structure of your pattern library\r\n        \r\n        \r\n        \r\n        \r\n        \r\n    </markdown>\r\n</main-template>"}},"repeaters":{"colorCards":{"html":"\r\n<div class=\"color-card\">\r\n\t<div class=\"brand {{name}}\"></div>\r\n\t<p>Hex: {{Hex}}</p>\r\n\t<p>RGB: {{RGB}}</p>\r\n\t<p>SCSS: $brand-{{name}}</p>\r\n</div>"},"colors":{"html":"<section class=\"{{name}}-colors\">\r\n\t<h3>{{title}} Colors</h3>\r\n\t<hr>\r\n\t<div class=\"color-wrapper\">\r\n\t\t<template repeater=\"colorCards\"></template>\r\n\t</div>\r\n</section>"},"icons":{"html":"<div class=\"icon-preview\">\r\n\t<h4>{{title}}</h4>\r\n\t<i class=\"exc-icon-{{name}}\"></i>\t\t\t\t\t\t\t\r\n\t<pre><code><i class=\"exc-icon-{{name}}\"></i></code></pre>\r\n</div>"},"navRail":{"html":"<li><a href=\"#{{name}}\">{{title}}</a></li>"},"notes":{"txt":"i'm thinking that the repeaters templates will each get built into a component, and then there will be either\r\none master 'repeater' manager component or a repeater manager component per repeater component\r\n\r\npro/contra repeater manager per repeater\r\npriority: functionality. is anything lost by going the single dynamic repeater manager path?\r\nthere may be some efficiency concern? every repeater gets repeated - every repetition containing another repeater means the repeatermanager\r\ndynamically bootstrapping so many components on the fly. worth trying out and seeing what happens.\r\nother potential loss - custom selectors? \r\n\r\nshould the sort be associated with the repeater or the thing being repeated?"},"pattern":{"html":"<div>\r\n    <span>this is a {{title}} and its id is {{name}}</span>\r\n</div>"}},"templates":{"main":{"html":"<div>\r\n    <div>\r\n        banner content\r\n    </div>\r\n    <content></content>\r\n</div>"},"notes":{"txt":"i think the config for this folder could be used to set selectors for templates"},"patternDisplay":{"html":"<template name=\"pattern-area\">\r\n    <markdown content=\"library.patterns/{{url.hash}}\"></markdown>\r\n    <repeater name=\"pattern\"></repeater>\r\n</template>"}}}}